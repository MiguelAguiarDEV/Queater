name: Deploy to Production

on:
    push:
        branches: [main]
    workflow_run:
        workflows: ['Test Laravel App']
        types:
            - completed
        branches: [main]

jobs:
    deploy:
        runs-on: ubuntu-latest
        if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

        steps:
            - name: Check required secrets
              run: |
                  if [ -z "${{ secrets.SERVER_HOST }}" ]; then
                    echo "❌ SERVER_HOST secret is not set"
                    exit 1
                  fi
                  if [ -z "${{ secrets.SERVER_USER }}" ]; then
                    echo "❌ SERVER_USER secret is not set"
                    exit 1
                  fi
                  if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
                    echo "❌ SERVER_SSH_KEY secret is not set"
                    exit 1
                  fi
                  if [ -z "${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}" ]; then
                    echo "❌ CLOUDFLARE_TUNNEL_TOKEN secret is not set"
                    exit 1
                  fi
                  echo "✅ All required secrets are configured"

            - name: Deploy to server
              uses: appleboy/ssh-action@v1.0.3
              env:
                  CLOUDFLARE_TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
                  # Add new Reverb secrets
                  ENV_REVERB_APP_ID: ${{ secrets.REVERB_APP_ID }}
                  ENV_REVERB_APP_KEY: ${{ secrets.REVERB_APP_KEY }}
                  ENV_REVERB_APP_SECRET: ${{ secrets.REVERB_APP_SECRET }}
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  port: 22
                  timeout: 30s
                  command_timeout: 10m
                  envs: >- # Use >- for multi-line strings
                      CLOUDFLARE_TUNNEL_TOKEN,
                      REVERB_APP_ID,
                      REVERB_APP_KEY,
                      REVERB_APP_SECRET
                  script: |
                      # Navegar al directorio del proyecto docker
                      cd ~/Queater || exit 1

                      # Hacer pull de los últimos cambios en la configuración del despliegue (docker-compose.yml, etc.)
                      echo "Pulling latest deployment configuration..."
                      git pull origin main

                      # Detener contenedores existentes para asegurar un estado limpio antes del build
                      echo "Stopping existing containers..."
                      docker-compose down

                      # Reconstruir y levantar contenedores. 
                      echo "Building and starting new containers..."
                      docker-compose up -d --build

                      # Esperar a que los contenedores estén listos (ajusta el tiempo si es necesario)
                      echo "Waiting for containers to initialize..."
                      sleep 30 # Increased sleep time slightly

                      # Configurar Laravel dentro del contenedor de la aplicación
                      echo "Configuring Laravel application..."

                      # Assuming 'app' is the correct service name from your docker-compose.yml for the Laravel application  
                      echo "Ensuring production .env file exists..."
                      if [ ! -f .env ]; then
                        if [ -f .env.deploy.example ]; then
                          cp .env.deploy.example .env
                          echo ".env file created from .env.deploy.example"
                        else
                          echo "Warning: .env.deploy.example not found. Creating empty .env."
                          touch .env # Ensure .env file exists
                        fi
                      fi

                      # Helper function to update .env variables
                      update_env_var() {
                        local key="$1"
                        local value="$2"
                        local env_file=".env"
                        # Escape slashes, ampersands, and backslashes for sed
                        local escaped_value=$(echo "$value" | sed -e "s/[\\\\\\/&]/\\\\\\\\&/g")
                        
                        if grep -q "^${key}=" "$env_file"; then
                          # Update existing
                          sed -i "s#^${key}=.*#${key}=${escaped_value}#" "$env_file"
                          echo "Updated ${key} in .env"
                        else
                          # Add new
                          echo "${key}=${escaped_value}" >> "$env_file"
                          echo "Added ${key} to .env"
                        fi
                      }

                      # Update Reverb variables from GitHub Secrets
                      if [ -n "${REVERB_APP_ID}" ]; then
                        update_env_var "REVERB_APP_ID" "${REVERB_APP_ID}"
                      fi
                      if [ -n "${REVERB_APP_KEY}" ]; then
                        update_env_var "REVERB_APP_KEY" "${REVERB_APP_KEY}"
                      fi
                      if [ -n "${REVERB_APP_SECRET}" ]; then
                        update_env_var "REVERB_APP_SECRET" "${REVERB_APP_SECRET}"
                      fi

                      # Asegúrate que APP_KEY esté vacía o no exista para generarla, o si no es válida.
                      if ! grep -q "^APP_KEY=base64:.\\{44\\}=\$" .env; then
                        echo "APP_KEY is not set or invalid, generating new one..."
                        php artisan key:generate --force
                      fi

                      echo "Optimizing Laravel application..."
                      php artisan optimize:clear # Clear cache before optimizing
                      php artisan optimize
                      php artisan view:cache
                      # Considera php artisan event:cache si usas eventos cacheados
                      # Considera php artisan queue:restart si usas colas que necesiten reiniciarse
                      # End of docker-compose exec script

                      # Reiniciar el contenedor de la aplicación para asegurar que todos los servicios
                      # recarguen la configuración y los archivos de caché optimizados.
                      echo "Restarting application container to apply all changes and start services..."
                      docker-compose restart app # Assuming 'app' is the correct service name

                      # Limpiar imágenes de Docker no utilizadas para ahorrar espacio
                      echo "Pruning unused Docker images..."
                      docker image prune -f

                      # Verificar que los contenedores estén ejecutándose
                      echo "Current container status:"
                      docker-compose ps

                      echo "✅ Deployment completed successfully!"
                      exit 0
                      "

    notify:
        runs-on: ubuntu-latest
        needs: deploy
        if: always()

        steps:
            - name: Notify deployment result
              run: |
                  if [ "${{ needs.deploy.result }}" == "success" ]; then
                    echo "✅ Deployment successful!"
                  else
                    echo "❌ Deployment failed!"
                    exit 1
                  fi
